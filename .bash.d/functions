#!/bin/env sh

function reload {
    source ~/.bashrc
}

function run_docker_tool {

  # Add a bunch of (optional) devices
  # (Don't add them unconditionally: if they don't exist, it
  # would prevent the container from starting)
  DEVICES=
  for DEV in /dev/kvm /dev/ttyUSB* /dev/dri/* /dev/snd/*; do
    if [ -b "$DEV" -o -c "$DEV" ]; then
      DEVICES="$DEVICES --device $DEV:$DEV"
    fi
  done

  # And a few (optional) files
  # (Here again, they don't always exist everywhere)
  VOLUMES=
  for VOL in /tmp/.X11-unix /run/user; do
    if [ -e "$VOL" ]; then
      VOLUMES="$VOLUMES --volume $VOL:$VOL"
    fi
  done

  # Check if we are on a tty to decide whether to allocate one
  DASHT=
  tty -s && DASHT=-t

  docker run $DASHT -i -u $(whoami) \
   $(env | cut -d= -f1 | awk '{print "-e", docker-tools/$1}') \
   $DOCKERFILES_RUN_FLAGS $DEVICES $VOLUMES \
   -v /etc/passwd:/etc/passwd:ro \
   -v /etc/group:/etc/group:ro \
   -v /etc/localtime:/etc/localtime:ro \
   -v /home/$(whoami)/.ssh/known_hosts:/home/$(whoami)/.ssh/known_hosts \
   -v "$SSH_AUTH_SOCK":/ssh-agent \
   -e SSH_AUTH_SOCK=/ssh-agent \
   -v $(pwd):/data \
   --link=dockerhub_mysql_1 \
   "docker-tools/$1" "$@"
}

command_not_found_handle() {

  # if [[ $(prompt_session_type) == "remote/docker" ]]; then
    # echo "$0: docker-tools/$1: command not found"
    # return
  # fi

  # echo docker inspect --format '{{ .Author }}' "docker-tools/$1"
  # docker inspect --format '{{ .Author }}' "docker-tools/$1"
  # Check if there is a container image with that name
  if ! docker inspect --format '{{ .Author }}' "docker-tools/$1" >&/dev/null; then
    echo "$0: docker-tools/$1: command not found"
    return
  fi

  # Check that it's really the name of the image, not a prefix
  if docker inspect --format '{{ .Id }}' "docker-tools/$1" | grep -q "^docker-tools/$1" ;then
    echo "$0: docker-tools/$1: command not found"
    return
  fi

  run_docker_tool $1;
}
